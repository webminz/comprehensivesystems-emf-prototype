/**
 * generated by Xtext 2.19.0
 */
package no.hvl.past.corrlang.correspondenceLanguage.impl;

import java.util.Collection;

import no.hvl.past.corrlang.correspondenceLanguage.CorrElement;
import no.hvl.past.corrlang.correspondenceLanguage.Correspondence;
import no.hvl.past.corrlang.correspondenceLanguage.CorrespondenceLanguagePackage;
import no.hvl.past.corrlang.correspondenceLanguage.Metamodel;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Correspondence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link no.hvl.past.corrlang.correspondenceLanguage.impl.CorrespondenceImpl#getModelSpace <em>Model Space</em>}</li>
 *   <li>{@link no.hvl.past.corrlang.correspondenceLanguage.impl.CorrespondenceImpl#getElements <em>Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CorrespondenceImpl extends MinimalEObjectImpl.Container implements Correspondence
{
  /**
   * The cached value of the '{@link #getModelSpace() <em>Model Space</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModelSpace()
   * @generated
   * @ordered
   */
  protected EList<Metamodel> modelSpace;

  /**
   * The cached value of the '{@link #getElements() <em>Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElements()
   * @generated
   * @ordered
   */
  protected EList<CorrElement> elements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CorrespondenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CorrespondenceLanguagePackage.Literals.CORRESPONDENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Metamodel> getModelSpace()
  {
    if (modelSpace == null)
    {
      modelSpace = new EObjectContainmentEList<Metamodel>(Metamodel.class, this, CorrespondenceLanguagePackage.CORRESPONDENCE__MODEL_SPACE);
    }
    return modelSpace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CorrElement> getElements()
  {
    if (elements == null)
    {
      elements = new EObjectContainmentEList<CorrElement>(CorrElement.class, this, CorrespondenceLanguagePackage.CORRESPONDENCE__ELEMENTS);
    }
    return elements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CorrespondenceLanguagePackage.CORRESPONDENCE__MODEL_SPACE:
        return ((InternalEList<?>)getModelSpace()).basicRemove(otherEnd, msgs);
      case CorrespondenceLanguagePackage.CORRESPONDENCE__ELEMENTS:
        return ((InternalEList<?>)getElements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CorrespondenceLanguagePackage.CORRESPONDENCE__MODEL_SPACE:
        return getModelSpace();
      case CorrespondenceLanguagePackage.CORRESPONDENCE__ELEMENTS:
        return getElements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CorrespondenceLanguagePackage.CORRESPONDENCE__MODEL_SPACE:
        getModelSpace().clear();
        getModelSpace().addAll((Collection<? extends Metamodel>)newValue);
        return;
      case CorrespondenceLanguagePackage.CORRESPONDENCE__ELEMENTS:
        getElements().clear();
        getElements().addAll((Collection<? extends CorrElement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CorrespondenceLanguagePackage.CORRESPONDENCE__MODEL_SPACE:
        getModelSpace().clear();
        return;
      case CorrespondenceLanguagePackage.CORRESPONDENCE__ELEMENTS:
        getElements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CorrespondenceLanguagePackage.CORRESPONDENCE__MODEL_SPACE:
        return modelSpace != null && !modelSpace.isEmpty();
      case CorrespondenceLanguagePackage.CORRESPONDENCE__ELEMENTS:
        return elements != null && !elements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CorrespondenceImpl
