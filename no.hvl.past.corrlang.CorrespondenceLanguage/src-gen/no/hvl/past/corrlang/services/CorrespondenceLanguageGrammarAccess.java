/*
 * generated by Xtext 2.19.0
 */
package no.hvl.past.corrlang.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CorrespondenceLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CorrespondenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hvl.past.corrlang.CorrespondenceLanguage.Correspondence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCorrespondenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelSpaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelSpaceMetamodelParserRuleCall_2_0 = (RuleCall)cModelSpaceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cModelSpaceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cModelSpaceMetamodelParserRuleCall_3_1_0 = (RuleCall)cModelSpaceAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsCorrElementParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Correspondence:
		//	'correspondence' '('
		//	modelSpace+=Metamodel (',' modelSpace+=Metamodel)+
		//	')' '{'
		//	elements+=CorrElement*
		//	'}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'correspondence' '(' modelSpace+=Metamodel (',' modelSpace+=Metamodel)+ ')' '{' elements+=CorrElement* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'correspondence'
		public Keyword getCorrespondenceKeyword_0() { return cCorrespondenceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//modelSpace+=Metamodel
		public Assignment getModelSpaceAssignment_2() { return cModelSpaceAssignment_2; }
		
		//Metamodel
		public RuleCall getModelSpaceMetamodelParserRuleCall_2_0() { return cModelSpaceMetamodelParserRuleCall_2_0; }
		
		//(',' modelSpace+=Metamodel)+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//modelSpace+=Metamodel
		public Assignment getModelSpaceAssignment_3_1() { return cModelSpaceAssignment_3_1; }
		
		//Metamodel
		public RuleCall getModelSpaceMetamodelParserRuleCall_3_1_0() { return cModelSpaceMetamodelParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//elements+=CorrElement*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//CorrElement
		public RuleCall getElementsCorrElementParserRuleCall_6_0() { return cElementsCorrElementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hvl.past.corrlang.CorrespondenceLanguage.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class CorrElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hvl.past.corrlang.CorrespondenceLanguage.CorrElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommonalityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CorrElement:
		//	Commonality | Constraint;
		@Override public ParserRule getRule() { return rule; }
		
		//Commonality | Constraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Commonality
		public RuleCall getCommonalityParserRuleCall_0() { return cCommonalityParserRuleCall_0; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_1() { return cConstraintParserRuleCall_1; }
	}
	public class MetamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hvl.past.corrlang.CorrespondenceLanguage.Metamodel");
		private final Assignment cImportedNamespaceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cImportedNamespaceEPackageCrossReference_0 = (CrossReference)cImportedNamespaceAssignment.eContents().get(0);
		private final RuleCall cImportedNamespaceEPackageIDTerminalRuleCall_0_1 = (RuleCall)cImportedNamespaceEPackageCrossReference_0.eContents().get(1);
		
		//Metamodel:
		//	importedNamespace=[ecore::EPackage];
		@Override public ParserRule getRule() { return rule; }
		
		//importedNamespace=[ecore::EPackage]
		public Assignment getImportedNamespaceAssignment() { return cImportedNamespaceAssignment; }
		
		//[ecore::EPackage]
		public CrossReference getImportedNamespaceEPackageCrossReference_0() { return cImportedNamespaceEPackageCrossReference_0; }
		
		//ID
		public RuleCall getImportedNamespaceEPackageIDTerminalRuleCall_0_1() { return cImportedNamespaceEPackageIDTerminalRuleCall_0_1; }
	}
	public class CommonalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hvl.past.corrlang.CorrespondenceLanguage.Commonality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cElementsEClassifierCrossReference_2_0 = (CrossReference)cElementsAssignment_2.eContents().get(0);
		private final RuleCall cElementsEClassifierQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cElementsEClassifierCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cElementsEClassifierCrossReference_3_1_0 = (CrossReference)cElementsAssignment_3_1.eContents().get(0);
		private final RuleCall cElementsEClassifierQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cElementsEClassifierCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cSubCommsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cSubCommsSubCommonalityParserRuleCall_7_2_0 = (RuleCall)cSubCommsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Commonality:
		//	'relate' '('
		//	elements+=[ecore::EClassifier|QualifiedName] (',' elements+=[ecore::EClassifier|QualifiedName])+ ')'
		//	'as' name=ID ('with' '{' subComms+=SubCommonality* '}')?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'relate' '(' elements+=[ecore::EClassifier|QualifiedName] (',' elements+=[ecore::EClassifier|QualifiedName])+ ')' 'as'
		//name=ID ('with' '{' subComms+=SubCommonality* '}')? ';'
		public Group getGroup() { return cGroup; }
		
		//'relate'
		public Keyword getRelateKeyword_0() { return cRelateKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elements+=[ecore::EClassifier|QualifiedName]
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//[ecore::EClassifier|QualifiedName]
		public CrossReference getElementsEClassifierCrossReference_2_0() { return cElementsEClassifierCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getElementsEClassifierQualifiedNameParserRuleCall_2_0_1() { return cElementsEClassifierQualifiedNameParserRuleCall_2_0_1; }
		
		//(',' elements+=[ecore::EClassifier|QualifiedName])+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//elements+=[ecore::EClassifier|QualifiedName]
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//[ecore::EClassifier|QualifiedName]
		public CrossReference getElementsEClassifierCrossReference_3_1_0() { return cElementsEClassifierCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getElementsEClassifierQualifiedNameParserRuleCall_3_1_0_1() { return cElementsEClassifierQualifiedNameParserRuleCall_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'as'
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }
		
		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
		
		//('with' '{' subComms+=SubCommonality* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'with'
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//subComms+=SubCommonality*
		public Assignment getSubCommsAssignment_7_2() { return cSubCommsAssignment_7_2; }
		
		//SubCommonality
		public RuleCall getSubCommsSubCommonalityParserRuleCall_7_2_0() { return cSubCommsSubCommonalityParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class SubCommonalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hvl.past.corrlang.CorrespondenceLanguage.SubCommonality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cElementsEStructuralFeatureCrossReference_2_0 = (CrossReference)cElementsAssignment_2.eContents().get(0);
		private final RuleCall cElementsEStructuralFeatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cElementsEStructuralFeatureCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cElementsEStructuralFeatureCrossReference_3_1_0 = (CrossReference)cElementsAssignment_3_1.eContents().get(0);
		private final RuleCall cElementsEStructuralFeatureQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cElementsEStructuralFeatureCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SubCommonality:
		//	'relate' '(' elements+=[ecore::EStructuralFeature|QualifiedName] (','
		//	elements+=[ecore::EStructuralFeature|QualifiedName])+ ')' 'as' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'relate' '(' elements+=[ecore::EStructuralFeature|QualifiedName] (','
		//elements+=[ecore::EStructuralFeature|QualifiedName])+ ')' 'as' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//'relate'
		public Keyword getRelateKeyword_0() { return cRelateKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//elements+=[ecore::EStructuralFeature|QualifiedName]
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//[ecore::EStructuralFeature|QualifiedName]
		public CrossReference getElementsEStructuralFeatureCrossReference_2_0() { return cElementsEStructuralFeatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getElementsEStructuralFeatureQualifiedNameParserRuleCall_2_0_1() { return cElementsEStructuralFeatureQualifiedNameParserRuleCall_2_0_1; }
		
		//(',' elements+=[ecore::EStructuralFeature|QualifiedName])+
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//elements+=[ecore::EStructuralFeature|QualifiedName]
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }
		
		//[ecore::EStructuralFeature|QualifiedName]
		public CrossReference getElementsEStructuralFeatureCrossReference_3_1_0() { return cElementsEStructuralFeatureCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getElementsEStructuralFeatureQualifiedNameParserRuleCall_3_1_0_1() { return cElementsEStructuralFeatureQualifiedNameParserRuleCall_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'as'
		public Keyword getAsKeyword_5() { return cAsKeyword_5; }
		
		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "no.hvl.past.corrlang.CorrespondenceLanguage.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraint:
		//	'constraint' name=ID '{'
		//	'}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' name=ID '{' '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	
	
	private final CorrespondenceElements pCorrespondence;
	private final QualifiedNameElements pQualifiedName;
	private final CorrElementElements pCorrElement;
	private final MetamodelElements pMetamodel;
	private final CommonalityElements pCommonality;
	private final SubCommonalityElements pSubCommonality;
	private final ConstraintElements pConstraint;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CorrespondenceLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCorrespondence = new CorrespondenceElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pCorrElement = new CorrElementElements();
		this.pMetamodel = new MetamodelElements();
		this.pCommonality = new CommonalityElements();
		this.pSubCommonality = new SubCommonalityElements();
		this.pConstraint = new ConstraintElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("no.hvl.past.corrlang.CorrespondenceLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Correspondence:
	//	'correspondence' '('
	//	modelSpace+=Metamodel (',' modelSpace+=Metamodel)+
	//	')' '{'
	//	elements+=CorrElement*
	//	'}' ';';
	public CorrespondenceElements getCorrespondenceAccess() {
		return pCorrespondence;
	}
	
	public ParserRule getCorrespondenceRule() {
		return getCorrespondenceAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//CorrElement:
	//	Commonality | Constraint;
	public CorrElementElements getCorrElementAccess() {
		return pCorrElement;
	}
	
	public ParserRule getCorrElementRule() {
		return getCorrElementAccess().getRule();
	}
	
	//Metamodel:
	//	importedNamespace=[ecore::EPackage];
	public MetamodelElements getMetamodelAccess() {
		return pMetamodel;
	}
	
	public ParserRule getMetamodelRule() {
		return getMetamodelAccess().getRule();
	}
	
	//Commonality:
	//	'relate' '('
	//	elements+=[ecore::EClassifier|QualifiedName] (',' elements+=[ecore::EClassifier|QualifiedName])+ ')'
	//	'as' name=ID ('with' '{' subComms+=SubCommonality* '}')?
	//	';';
	public CommonalityElements getCommonalityAccess() {
		return pCommonality;
	}
	
	public ParserRule getCommonalityRule() {
		return getCommonalityAccess().getRule();
	}
	
	//SubCommonality:
	//	'relate' '(' elements+=[ecore::EStructuralFeature|QualifiedName] (','
	//	elements+=[ecore::EStructuralFeature|QualifiedName])+ ')' 'as' name=ID ';';
	public SubCommonalityElements getSubCommonalityAccess() {
		return pSubCommonality;
	}
	
	public ParserRule getSubCommonalityRule() {
		return getSubCommonalityAccess().getRule();
	}
	
	//Constraint:
	//	'constraint' name=ID '{'
	//	'}' ';';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
