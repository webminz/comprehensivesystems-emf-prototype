/*
 * generated by Xtext 2.19.0
 */
package no.hvl.past.corrlang.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import no.hvl.past.corrlang.ide.contentassist.antlr.internal.InternalCorrespondenceLanguageParser;
import no.hvl.past.corrlang.services.CorrespondenceLanguageGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CorrespondenceLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CorrespondenceLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CorrespondenceLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCorrElementAccess().getAlternatives(), "rule__CorrElement__Alternatives");
			builder.put(grammarAccess.getCorrespondenceAccess().getGroup(), "rule__Correspondence__Group__0");
			builder.put(grammarAccess.getCorrespondenceAccess().getGroup_3(), "rule__Correspondence__Group_3__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getCommonalityAccess().getGroup(), "rule__Commonality__Group__0");
			builder.put(grammarAccess.getCommonalityAccess().getGroup_3(), "rule__Commonality__Group_3__0");
			builder.put(grammarAccess.getCommonalityAccess().getGroup_7(), "rule__Commonality__Group_7__0");
			builder.put(grammarAccess.getSubCommonalityAccess().getGroup(), "rule__SubCommonality__Group__0");
			builder.put(grammarAccess.getSubCommonalityAccess().getGroup_3(), "rule__SubCommonality__Group_3__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getCorrespondenceAccess().getModelSpaceAssignment_2(), "rule__Correspondence__ModelSpaceAssignment_2");
			builder.put(grammarAccess.getCorrespondenceAccess().getModelSpaceAssignment_3_1(), "rule__Correspondence__ModelSpaceAssignment_3_1");
			builder.put(grammarAccess.getCorrespondenceAccess().getElementsAssignment_6(), "rule__Correspondence__ElementsAssignment_6");
			builder.put(grammarAccess.getMetamodelAccess().getImportedNamespaceAssignment(), "rule__Metamodel__ImportedNamespaceAssignment");
			builder.put(grammarAccess.getCommonalityAccess().getElementsAssignment_2(), "rule__Commonality__ElementsAssignment_2");
			builder.put(grammarAccess.getCommonalityAccess().getElementsAssignment_3_1(), "rule__Commonality__ElementsAssignment_3_1");
			builder.put(grammarAccess.getCommonalityAccess().getNameAssignment_6(), "rule__Commonality__NameAssignment_6");
			builder.put(grammarAccess.getCommonalityAccess().getSubCommsAssignment_7_2(), "rule__Commonality__SubCommsAssignment_7_2");
			builder.put(grammarAccess.getSubCommonalityAccess().getElementsAssignment_2(), "rule__SubCommonality__ElementsAssignment_2");
			builder.put(grammarAccess.getSubCommonalityAccess().getElementsAssignment_3_1(), "rule__SubCommonality__ElementsAssignment_3_1");
			builder.put(grammarAccess.getSubCommonalityAccess().getNameAssignment_6(), "rule__SubCommonality__NameAssignment_6");
			builder.put(grammarAccess.getConstraintAccess().getNameAssignment_1(), "rule__Constraint__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CorrespondenceLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalCorrespondenceLanguageParser createParser() {
		InternalCorrespondenceLanguageParser result = new InternalCorrespondenceLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CorrespondenceLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CorrespondenceLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
